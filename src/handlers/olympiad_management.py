from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from services.database import Database
from states import AddOlympiadStates
from keyboards.keyboards import (
    admin_main_keyboard,
    subjects_keyboard,
    confirm_keyboard,
    back_to_admin_menu_keyboard
)

router = Router()
db = Database()

async def is_admin_or_moderator(telegram_id: int) -> bool:
    return await db.is_admin_or_moderator(telegram_id)

async def delete_lst_msgs(message: Message):
    await message.bot.delete_message(message.chat.id, message.message_id - 1)
    await message.bot.delete_message(message.chat.id, message.message_id)


@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if not await is_admin_or_moderator(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
        
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=admin_main_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
async def start_adding_olympiad(message: Message, state: FSMContext):
    if not await is_admin_or_moderator(message.from_user.id):
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.title)

@router.message(AddOlympiadStates.title)
async def process_title(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.description)

@router.message(AddOlympiadStates.description)
async def process_description(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.organizer)

@router.message(AddOlympiadStates.organizer)
async def process_organizer(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(organizer=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddOlympiadStates.start_date)

@router.message(AddOlympiadStates.start_date)
async def process_start_date(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    date_text = message.text.strip()
    try:
        start_date = datetime.strptime(date_text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return
    
    await state.update_data(start_date=start_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddOlympiadStates.end_date)

@router.message(AddOlympiadStates.end_date)
async def process_end_date(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    date_text = message.text.strip()
    try:
        end_date = datetime.strptime(date_text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    data = await state.get_data()
    start_date = data['start_date']

    if end_date < start_date:
        await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
        return
    
    await state.update_data(end_date=end_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
    subjects = await db.get_subjects()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        reply_markup=subjects_keyboard(subjects)
    )
    await state.set_state(AddOlympiadStates.select_subject)

@router.callback_query(AddOlympiadStates.select_subject, F.data.startswith("subject_"))
async def process_subject(callback: CallbackQuery, state: FSMContext):
    subject_id = int(callback.data.split("_")[1])
    await state.update_data(subject_id=subject_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    subject_name = await db.get_subject_name(subject_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    olympiad_data = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {data['organizer']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {data['start_date']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {data['end_date']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}"
    )
    
    await callback.message.answer(
        olympiad_data,
        reply_markup=confirm_keyboard()
    )
    await state.set_state(AddOlympiadStates.confirm_data)
    await callback.answer()

@router.callback_query(AddOlympiadStates.confirm_data, F.data == "confirm_yes")
async def confirm_olympiad(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É –≤ –ë–î
    success = await db.create_olympiad(
        title=data['title'],
        description=data['description'],
        organizer=data['organizer'],
        start_date=data['start_date'],
        end_date=data['end_date'],
        subject_id=data['subject_id']
    )
    
    if success:
        await callback.message.answer(
            "‚úÖ –û–ª–∏–º–ø–∏–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=back_to_admin_menu_keyboard()
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã",
            reply_markup=back_to_admin_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(
    AddOlympiadStates.confirm_data, 
    F.data == "confirm_no"
)
async def restart_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await start_adding_olympiad('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É', state)