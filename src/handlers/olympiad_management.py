from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from services.database import Database
from states import AddOlympiadStates, EditOlympiadStates
from keyboards.keyboards import (
    admin_main_keyboard,
    subjects_keyboard,
    confirm_keyboard,
    back_to_admin_menu_keyboard,
    olympiads_list_keyboard,
    olympiad_detail_keyboard,
    olympiad_applications_keyboard,
    application_action_keyboard,
    edit_olympiad_field_keyboard,
    confirm_delete_keyboard,
    application_status_change_keyboard
)
from datetime import datetime

router = Router()
db = Database()


async def delete_lst_msgs(message: Message):
    await message.bot.delete_message(message.chat.id, message.message_id - 1)
    await message.bot.delete_message(message.chat.id, message.message_id)


@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if not await db.is_admin_or_moderator(message.from_user.id):
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
        
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=admin_main_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É")
async def start_adding_olympiad(message: Message, state: FSMContext):
    if not await db.is_admin_or_moderator(message.from_user.id):
        return
        
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.title)

@router.message(AddOlympiadStates.title)
async def process_title(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.description)

@router.message(AddOlympiadStates.description)
async def process_description(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã:")
    await state.set_state(AddOlympiadStates.organizer)

@router.message(AddOlympiadStates.organizer)
async def process_organizer(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(organizer=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddOlympiadStates.start_date)

@router.message(AddOlympiadStates.start_date)
async def process_start_date(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    date_text = message.text.strip()
    try:
        start_date = datetime.strptime(date_text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return
    
    await state.update_data(start_date=start_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):")
    await state.set_state(AddOlympiadStates.end_date)

@router.message(AddOlympiadStates.end_date)
async def process_end_date(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    date_text = message.text.strip()
    try:
        end_date = datetime.strptime(date_text, "%Y-%m-%d").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return

    data = await state.get_data()
    start_date = data['start_date']

    if end_date < start_date:
        await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
        return
    
    await state.update_data(end_date=end_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞
    subjects = await db.get_subjects()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        reply_markup=subjects_keyboard(subjects)
    )
    await state.set_state(AddOlympiadStates.select_subject)

@router.callback_query(AddOlympiadStates.select_subject, F.data.startswith("subject_"))
async def process_subject(callback: CallbackQuery, state: FSMContext):
    subject_id = int(callback.data.split("_")[1])
    await state.update_data(subject_id=subject_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    subject_name = await db.get_subject_name(subject_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    olympiad_data = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {data['organizer']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {data['start_date']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {data['end_date']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}"
    )
    
    await callback.message.answer(
        olympiad_data,
        reply_markup=confirm_keyboard()
    )
    await state.set_state(AddOlympiadStates.confirm_data)
    await callback.answer()

@router.callback_query(AddOlympiadStates.confirm_data, F.data == "confirm_yes")
async def confirm_olympiad(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É –≤ –ë–î
    success = await db.create_olympiad(
        title=data['title'],
        description=data['description'],
        organizer=data['organizer'],
        start_date=data['start_date'],
        end_date=data['end_date'],
        subject_id=data['subject_id']
    )
    
    if success:
        await callback.message.answer(
            "‚úÖ –û–ª–∏–º–ø–∏–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=back_to_admin_menu_keyboard()
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã",
            reply_markup=back_to_admin_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(
    AddOlympiadStates.confirm_data, 
    F.data == "confirm_no"
)
async def restart_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await start_adding_olympiad('‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É', state)


@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥")
async def list_olympiads(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥"""
    if not await db.is_admin_or_moderator(message.from_user.id):
        return
        
    olympiads = await db.get_all_olympiads()
    
    if not olympiads:
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –ø—É—Å—Ç")
        return
        
    await message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:",
        reply_markup=olympiads_list_keyboard(olympiads, page=0)
    )

@router.callback_query(F.data.startswith("olympiads_page_"))
async def change_olympiads_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–ª–∏–º–ø–∏–∞–¥"""
    page = int(callback.data.split("_")[2])
    olympiads = await db.get_all_olympiads()
    
    await callback.message.edit_reply_markup(
        reply_markup=olympiads_list_keyboard(olympiads, page)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("view_olympiad_apps_"))
async def view_olympiad_applications(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ª–∏–º–ø–∏–∞–¥—É"""
    olympiad_id = int(callback.data.split("_")[3])
    applications = await db.get_applications_for_olympiad(olympiad_id)
    
    if not applications:
        await callback.answer("–ù–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
        return
        
    olympiad = await db.get_olympiad_by_id(olympiad_id)
    title = olympiad['title'] if olympiad else f"–û–ª–∏–º–ø–∏–∞–¥–∞ #{olympiad_id}"
    
    await callback.message.answer(
        f"üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É: {title}",
        reply_markup=olympiad_applications_keyboard(applications, olympiad_id)
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("app_admin_app_check_"))
async def view_application_admin(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    application_id = int(callback.data.split("_")[-1])
    application = await db.get_application_details(application_id)
    
    if not application:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    created_date = application['created_date'].strftime("%d.%m.%Y %H:%M")
    application_info = (
        f"üìù –ó–∞—è–≤–∫–∞ #{application_id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application['first_name']} {application['last_name']} {application['middle_name']}\n"
        f"üèÜ –û–ª–∏–º–ø–∏–∞–¥–∞: {application['olympiad_title']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {application['status_name']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {created_date}"
    )
    
    await callback.message.answer(
        application_info,
        reply_markup=application_action_keyboard(application_id)
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("view_olympiad_"))
async def view_olympiad_details(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    olympiad_id = int(callback.data.split("_")[2])
    olympiad = await db.get_olympiad_by_id(olympiad_id)
    
    if not olympiad:
        await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    subject_name = await db.get_subject_name(olympiad['subject_id'])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    start_date = olympiad['start_date'].strftime("%d.%m.%Y")
    end_date = olympiad['end_date'].strftime("%d.%m.%Y")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    olympiad_info = (
        f"üèÜ <b>{olympiad['title']}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {olympiad['description']}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {olympiad['organizer']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
        f"üÜî ID: {olympiad['olympiad_id']}"
    )
    
    await callback.message.answer(
        olympiad_info,
        reply_markup=olympiad_detail_keyboard(olympiad_id),
        parse_mode="HTML"
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("change_app_status_"))
async def change_application_status(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    application_id = int(callback.data.split("_")[3])
    current_status = (await db.get_application_details(application_id))['status_name']
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=application_status_change_keyboard(application_id, current_status)
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("set_app_status_"))
async def set_application_status(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    parts = callback.data.split("_")
    application_id = int(parts[3])
    new_status = parts[4]
    
    success = await db.update_application_status(application_id, new_status)
    
    if success:
        await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_app_"))
async def delete_application_admin(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    application_id = int(callback.data.split("_")[2])
    success = await db.delete_application(application_id)
    
    if success:
        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("edit_olympiad_"))
async def start_editing_olympiad(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    olympiad_id = int(callback.data.split("_")[2])
    await state.update_data(olympiad_id=olympiad_id)
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_olympiad_field_keyboard()
    )
    await state.set_state(EditOlympiadStates.select_field)
    await callback.message.delete()
    await callback.answer()

@router.callback_query(EditOlympiadStates.select_field, F.data.startswith("edit_field_"))
async def select_field_to_edit(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split("_")[2]
    await state.update_data(edit_field=field)
    
    field_names = {
        "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "organizer": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞",
        "start": "–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)",
        "end": "–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)",
        # "subject": "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"
    }
    
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names.get(field, '–∑–Ω–∞—á–µ–Ω–∏–µ')}:")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if field == "title":
        await state.set_state(EditOlympiadStates.edit_title)
    elif field == "description":
        await state.set_state(EditOlympiadStates.edit_description)
    elif field == "organizer":
        await state.set_state(EditOlympiadStates.edit_organizer)
    elif field == "start_date":
        await state.set_state(EditOlympiadStates.edit_start_date)
    elif field == "end_date":
        await state.set_state(EditOlympiadStates.edit_end_date)
    elif field == "subject":
        await state.set_state(EditOlympiadStates.edit_subject)
    
    await callback.message.delete()
    await callback.answer()

@router.message(EditOlympiadStates.edit_title)
async def process_edit_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    success = await db.update_olympiad_field(data['olympiad_id'], "title", message.text)
    await process_edit_complete(message, state, success, "–Ω–∞–∑–≤–∞–Ω–∏–µ")

@router.message(EditOlympiadStates.edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    success = await db.update_olympiad_field(data['olympiad_id'], "description", message.text)
    await process_edit_complete(message, state, success, "–æ–ø–∏—Å–∞–Ω–∏–µ")

@router.message(EditOlympiadStates.edit_organizer)
async def process_edit_organizer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()
    success = await db.update_olympiad_field(data['olympiad_id'], "organizer", message.text)
    await process_edit_complete(message, state, success, "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞")

@router.message(EditOlympiadStates.edit_start_date)
async def process_edit_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    data = await state.get_data()
    success = await db.update_olympiad_field(data['olympiad_id'], "start_date", message.text)
    await process_edit_complete(message, state, success, "–¥–∞—Ç—É –Ω–∞—á–∞–ª–∞")

@router.message(EditOlympiadStates.edit_end_date)
async def process_edit_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    data = await state.get_data()
    success = await db.update_olympiad_field(data['olympiad_id'], "end_date", message.text)
    await process_edit_complete(message, state, success, "–¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è")

@router.message(EditOlympiadStates.edit_subject)
async def process_edit_subject(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"""
    data = await state.get_data()
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ ID –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    success = True  # –ó–∞–≥–ª—É—à–∫–∞
    
    if success:
        await message.answer("‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    
    await state.clear()
    await view_olympiad_details_by_id(message.bot, message.chat.id, data['olympiad_id'])

async def process_edit_complete(message: Message, state: FSMContext, success: bool, field_name: str):
    """–û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    
    if success:
        await message.answer(f"‚úÖ {field_name.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field_name}")
    
    await state.clear()
    await view_olympiad_details_by_id(message.bot, message.chat.id, data['olympiad_id'])

async def view_olympiad_details_by_id(bot, chat_id, olympiad_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ ID"""
    olympiad = await db.get_olympiad_by_id(olympiad_id)
    if not olympiad:
        await bot.send_message(chat_id, "–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    subject_name = await db.get_subject_name(olympiad['subject_id'])
    start_date = olympiad['start_date'].strftime("%d.%m.%Y")
    end_date = olympiad['end_date'].strftime("%d.%m.%Y")
    olympiad_info = (
        f"üèÜ <b>{olympiad['title']}</b>\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {olympiad['description']}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {olympiad['organizer']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {start_date}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date}\n"
        f"üÜî ID: {olympiad['olympiad_id']}"
    )
    
    await bot.send_message(
        chat_id,
        olympiad_info,
        reply_markup=olympiad_detail_keyboard(olympiad_id),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_olympiad_"))
async def delete_olympiad(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    olympiad_id = int(callback.data.split("_")[2])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
        reply_markup=confirm_delete_keyboard("olympiad", olympiad_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_olympiad_"))
async def confirm_delete_olympiad(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    if callback.data.startswith("confirm_delete_olympiad_no"):
        await callback.message.delete()
        await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    olympiad_id = int(callback.data.split("_")[4])
    success = await db.delete_olympiad(olympiad_id)
    
    if success:
        await callback.message.answer("‚úÖ –û–ª–∏–º–ø–∏–∞–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã")
    
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=admin_main_keyboard()
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "back_to_olympiads_list")
async def back_to_olympiads_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ–ª–∏–º–ø–∏–∞–¥"""
    olympiads = await db.get_all_olympiads()
    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:",
        reply_markup=olympiads_list_keyboard(olympiads, page=0)
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_applications_list_"))
async def back_to_applications_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É"""
    application_id = int(callback.data.split("_")[4])
    data_app = await db.get_application_details(application_id)
    applications = await db.get_applications_for_olympiad(data_app['olympiad_id'])
    
    if not applications:
        await callback.answer("–ù–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
        return
        
    olympiad = await db.get_olympiad_by_id(data_app['olympiad_id'])
    title = olympiad['title'] if olympiad else f"–û–ª–∏–º–ø–∏–∞–¥–∞ #{data_app['olympiad_id']}"
    
    await callback.message.answer(
        f"üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É: {title}",
        reply_markup=olympiad_applications_keyboard(applications, data_app['olympiad_id'])
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "cancel_editing_olymp_field")
async def back_to_applications_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–ª–∏–º–ø–∏–∞–¥—É"""
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if not await db.is_admin_or_moderator(callback.from_user.id):
        return
        
    olympiads = await db.get_all_olympiads()
    
    if not olympiads:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ –ø—É—Å—Ç")
        return
        
    await callback.message.answer(
        "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥:",
        reply_markup=olympiads_list_keyboard(olympiads, page=0)
    )