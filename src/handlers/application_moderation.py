from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from services.database import Database
from keyboards.keyboards import (
    application_list_keyboard,
    application_action_keyboard
)

router = Router()
db = Database()

@router.message(F.text == "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
async def show_pending_applications(message: Message):
    if not await db.is_admin_or_moderator(message.from_user.id):
        return
        
    applications = await db.get_pending_applications()
    
    if not applications:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return
        
    await message.answer(
        "–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=application_list_keyboard(applications)
    )

@router.callback_query(F.data.startswith("app_approve_"))
async def approve_application(callback: CallbackQuery):
    application_id = int(callback.data.split("_")[2])
    success = await db.update_application_status(application_id, "–û–¥–æ–±—Ä–µ–Ω–∞")
    
    if success:
        await callback.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await callback.answer()

@router.callback_query(F.data.startswith("app_reject_"))
async def reject_application(callback: CallbackQuery):
    application_id = int(callback.data.split("_")[2])
    success = await db.update_application_status(application_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    if success:
        await callback.message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await callback.answer()

@router.callback_query(F.data.startswith("app_"))
async def show_application_details(callback: CallbackQuery):
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    application_id = int(callback.data.split("_")[1])
    application = await db.get_application_details(application_id)
    
    if not application:
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    application_info = (
        f"üìù –ó–∞—è–≤–∫–∞ #{application_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application['first_name']} {application['last_name']}\n"
        f"üìö –û–ª–∏–º–ø–∏–∞–¥–∞: {application['olympiad_title']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {application['created_date']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {application['status_name']}"
    )
    
    await callback.message.answer(
        application_info,
        reply_markup=application_action_keyboard(application_id)
    )
    await callback.answer()


@router.callback_query(F.data == 'back_to_applications')
async def back_application(callback: Message):
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    applications = await db.get_pending_applications()
    
    if not applications:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return
    
    await callback.message.answer(
        "–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=application_list_keyboard(applications)
    )