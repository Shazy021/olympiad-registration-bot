from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from services.database import Database
from states import ModerationStates
from keyboards.keyboards import (
    application_list_keyboard,
    moder_application_action_keyboard,
    skip_comment_keyboard
)

router = Router()
db = Database()

@router.message(F.text == "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
async def show_pending_applications(message: Message):
    if not await db.is_admin_or_moderator(message.from_user.id):
        return
        
    applications = await db.get_pending_applications()
    
    if not applications:
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return
        
    await message.answer(
        "–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=application_list_keyboard(applications)
    )

@router.callback_query(F.data.startswith("app_approve_"))
async def approve_application(callback: CallbackQuery, state: FSMContext):
    application_id = int(callback.data.split("_")[2])
    await state.update_data(application_id=application_id, action="–û–¥–æ–±—Ä–µ–Ω–∞")
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=skip_comment_keyboard()
    )
    await state.set_state(ModerationStates.waiting_comment)
    await callback.answer()

@router.callback_query(F.data.startswith("app_reject_"))
async def reject_application(callback: CallbackQuery, state: FSMContext):
    application_id = int(callback.data.split("_")[2])
    await state.update_data(application_id=application_id, action="reject")
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=skip_comment_keyboard()
    )
    await state.set_state(ModerationStates.waiting_comment)
    await callback.answer()

@router.callback_query(ModerationStates.waiting_comment, F.data == "skip_comment")
async def skip_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    application_id = data['application_id']
    action = data['action']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    status = "–û–¥–æ–±—Ä–µ–Ω–∞" if action == "–û–¥–æ–±—Ä–µ–Ω–∞" else "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    success = await db.update_application_status(application_id, status)
    
    if success:
        status_icon = "‚úÖ" if action == "–û–¥–æ–±—Ä–µ–Ω–∞" else "‚ùå"
        await callback.message.answer(f"{status_icon} –ó–∞—è–≤–∫–∞ {status.lower()}!")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await state.clear()
    await callback.answer()

@router.message(ModerationStates.waiting_comment)
async def process_moderation_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    application_id = data['application_id']
    action = data['action']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = "–û–¥–æ–±—Ä–µ–Ω–∞" if action == "–û–¥–æ–±—Ä–µ–Ω–∞" else "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    success = await db.update_application_status(application_id, status)
    
    if not success:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    moderator = await db.get_user(message.from_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    success = await db.create_message(
        user_id=moderator['user_id'],
        application_id=application_id,
        message_text=message.text
    )
    
    if success:
        status_icon = "‚úÖ" if action == "–û–¥–æ–±—Ä–µ–Ω–∞" else "‚ùå"
        await message.answer(f"{status_icon} –ó–∞—è–≤–∫–∞ {status.lower()} —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º!")
    else:
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    
    await state.clear()

@router.callback_query(F.data.startswith("app_id_"))
async def show_application_details(callback: CallbackQuery):
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    application_id = int(callback.data.split("_")[2])
    application = await db.get_application_details(application_id)
    
    if not application:
        await callback.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    application_info = (
        f"üìù –ó–∞—è–≤–∫–∞ #{application_id}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application['first_name']} {application['last_name']}\n"
        f"üìö –û–ª–∏–º–ø–∏–∞–¥–∞: {application['olympiad_title']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {application['created_date']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {application['status_name']}"
    )
    
    await callback.message.answer(
        application_info,
        reply_markup=moder_application_action_keyboard(application_id)
    )
    await callback.answer()


@router.callback_query(F.data == 'back_to_applications_moderation')
async def back_application(callback: Message):
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    applications = await db.get_pending_applications()
    
    if not applications:
        await callback.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        return
    
    await callback.message.answer(
        "–ó–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=application_list_keyboard(applications)
    )