from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from services.database import Database
from states import ApplicationStates
from keyboards.keyboards import (
    olympiads_keyboard,
    main_menu_keyboard,
    confirm_olimp_keyboard,
    my_applications_keyboard,
    back_to_my_applications_keyboard
)

router = Router()
db = Database()

@router.message(F.text == "üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã")
async def show_olympiads(message: Message):
    await message.bot.delete_message(message.chat.id, message.message_id)

    olympiads = await db.get_active_olympiads()
    
    if not olympiads:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        return
        
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=olympiads_keyboard(olympiads)
    )

@router.callback_query(F.data.startswith("olympiad_"))
async def select_olympiad(callback: CallbackQuery, state: FSMContext):
    olympiad_id = int(callback.data.split("_")[1])
    await state.update_data(olympiad_id=olympiad_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ
    olympiad = await db.get_olympiad_by_id(olympiad_id)
    
    if not olympiad:
        await callback.message.answer("–û—à–∏–±–∫–∞: –æ–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    subject_name = await db.get_subject_name(olympiad['subject_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    olympiad_info = (
        f"üèÜ {olympiad['title']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {olympiad['organizer']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {olympiad['start_date']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {olympiad['end_date']}\n\n"
        f"{olympiad['description']}"
    )
    
    await callback.message.answer(
        olympiad_info,
        reply_markup=confirm_olimp_keyboard()
    )
    await state.set_state(ApplicationStates.confirm_application)
    await callback.answer()

@router.callback_query(ApplicationStates.confirm_application, F.data == "application_confirm")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    olympiad_id = data['olympiad_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    if await db.has_application(user_id, olympiad_id):
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É")
        await state.clear()
        return
        
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    success = await db.create_application(user_id, olympiad_id)
    
    if success:
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(callback.from_user.id))
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(callback.from_user.id))
        )
    
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_applications(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    applications = await db.get_user_applications(user['user_id'])
    
    if not applications:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    app_list = []
    for app in applications:
        status_icon = "üü°" if app['status_name'] == '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ' else "üü¢" if app['status_name'] == '–û–¥–æ–±—Ä–µ–Ω–∞' else "üî¥"
        app_list.append({
            "id": app['application_id'],
            "text": f"{status_icon} {app['olympiad_title']} ({app['status_name']})"
        })
    
    await message.answer(
        "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=my_applications_keyboard(app_list)
    )

@router.callback_query(F.data.startswith("view_my_app_"))
async def view_my_application_details(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    application_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
    application = await db.get_application_details(application_id)
    if not application:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
    message = await db.get_application_moderator_message(application_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    created_date = application['created_date'].strftime("%d.%m.%Y %H:%M")
    application_info = (
        f"üìù –ó–∞—è–≤–∫–∞ #{application_id}\n"
        f"üèÜ –û–ª–∏–º–ø–∏–∞–¥–∞: {application['olympiad_title']}\n"
        f"üîÑ –°—Ç–∞—Ç—É—Å: {application['status_name']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {created_date}"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if message:
        application_info += f"\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n{message['message_text']}"
    else:
        application_info += "\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    await callback.message.answer(
        application_info,
        reply_markup=back_to_my_applications_keyboard()
    )
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "back_to_my_applications")
async def back_to_my_applications(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    user = await db.get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    applications = await db.get_user_applications(user['user_id'])
    
    if not applications:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    app_list = []
    for app in applications:
        status_icon = "üü°" if app['status_name'] == '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ' else "üü¢" if app['status_name'] == '–û–¥–æ–±—Ä–µ–Ω–∞' else "üî¥"
        app_list.append({
            "id": app['application_id'],
            "text": f"{status_icon} {app['olympiad_title']} ({app['status_name']})"
        })
    
    await callback.message.answer(
        "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=my_applications_keyboard(app_list)
    )
    await callback.answer()