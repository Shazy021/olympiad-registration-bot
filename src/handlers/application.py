from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from services.database import Database
from states import ApplicationStates
from keyboards.keyboards import (
    olympiads_keyboard,
    main_menu_keyboard,
    confirm_olimp_keyboard
)

router = Router()
db = Database()

@router.message(F.text == "üèÜ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã")
async def show_olympiads(message: Message):
    await message.bot.delete_message(message.chat.id, message.message_id)

    olympiads = await db.get_active_olympiads()
    
    if not olympiads:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥")
        return
        
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:",
        reply_markup=olympiads_keyboard(olympiads)
    )

@router.callback_query(F.data.startswith("olympiad_"))
async def select_olympiad(callback: CallbackQuery, state: FSMContext):
    olympiad_id = int(callback.data.split("_")[1])
    await state.update_data(olympiad_id=olympiad_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ
    olympiad = await db.get_olympiad_by_id(olympiad_id)
    
    if not olympiad:
        await callback.message.answer("–û—à–∏–±–∫–∞: –æ–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    subject_name = await db.get_subject_name(olympiad['subject_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    olympiad_info = (
        f"üèÜ {olympiad['title']}\n"
        f"üìö –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {subject_name}\n"
        f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {olympiad['organizer']}\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {olympiad['start_date']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {olympiad['end_date']}\n\n"
        f"{olympiad['description']}"
    )
    
    await callback.message.answer(
        olympiad_info,
        reply_markup=confirm_olimp_keyboard()
    )
    await state.set_state(ApplicationStates.confirm_application)
    await callback.answer()

@router.callback_query(ApplicationStates.confirm_application, F.data == "application_confirm")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    olympiad_id = data['olympiad_id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
    if await db.has_application(user_id, olympiad_id):
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç—É –æ–ª–∏–º–ø–∏–∞–¥—É")
        await state.clear()
        return
        
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    success = await db.create_application(user_id, olympiad_id)
    
    if success:
        await callback.message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(callback.from_user.id))
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(callback.from_user.id))
        )
    
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def show_my_applications(message: Message):
    applications = db.get_user_applications(message.from_user.id)
    
    if not applications:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    text = "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
    for app in applications:
        text += f"üèÜ {app['olympiad_title']}\n"
        text += f"üìÖ {app['registration_date']}\n"
        text += f"üîÑ –°—Ç–∞—Ç—É—Å: {app['status']}\n\n"
    
    await message.answer(text)
    