from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from states import RegistrationStates
from services.database import Database
from keyboards.keyboards import main_menu_keyboard, role_keyboard, confirm_keyboard, categories_keyboard

router = Router()
db = Database()

async def delete_lst_msgs(message: Message):
    await message.bot.delete_message(message.chat.id, message.message_id - 1)
    await message.bot.delete_message(message.chat.id, message.message_id)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await db.get_user(message.from_user.id)
    
    if user:
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['first_name']}!",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(message.from_user.id))
        )
        return
        
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegistrationStates.first_name)

@router.message(RegistrationStates.first_name, F.text)
async def process_first_name(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(first_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.last_name)

@router.message(RegistrationStates.last_name, F.text)
async def process_last_name(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    await state.update_data(last_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    await state.set_state(RegistrationStates.middle_name)

@router.message(RegistrationStates.middle_name, F.text)
async def process_middle_name(message: Message, state: FSMContext):
    await delete_lst_msgs(message)

    data = await state.get_data()
    data['middle_name'] = message.text if message.text != "-" else None
    await state.set_data(data)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_keyboard()
    )
    await state.set_state(RegistrationStates.select_role)

@router.callback_query(
    RegistrationStates.select_role,
    F.data.startswith("role_")
)
async def process_role_selection(callback: CallbackQuery, state: FSMContext):
    role_type = callback.data.split("_")[1]
    await state.update_data(role=role_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_keyboard()
    )
    await state.set_state(RegistrationStates.select_category)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(
    RegistrationStates.select_category,
    F.data.startswith("category_")
)
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.update_data(category_id=category_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    role_mapping = {
        "student": "üéì –°—Ç—É–¥–µ–Ω—Ç",
        "teacher": "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
        "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    }
    role_name = role_mapping.get(data['role'], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = await db.get_category_name(category_id)
    
    user_data = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ –ò–º—è: {data['first_name']}\n"
        f"üìñ –§–∞–º–∏–ª–∏—è: {data['last_name']}\n"
        f"üìù –û—Ç—á–µ—Å—Ç–≤–æ: {data.get('middle_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üé≠ –†–æ–ª—å: {role_name}\n"
        f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}"
    )
    
    await callback.message.edit_text(
        user_data,
        reply_markup=confirm_keyboard()
    )
    await state.set_state(RegistrationStates.confirm_data)
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(
    RegistrationStates.confirm_data, 
    F.data == "confirm_yes"
)
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    try:
        role_mapping = {
            "student": "–°—Ç—É–¥–µ–Ω—Ç",
            "teacher": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        role_name = role_mapping.get(data.get('role', 'student'), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        await db.create_user(
            telegram_id=callback.from_user.id,
            first_name=data['first_name'],
            last_name=data['last_name'],
            middle_name=data.get('middle_name'),
            role=role_name,
            category_id=data.get('category_id')
        )
        
        first_name = data['first_name']
        category_name = await db.get_category_name(data.get('category_id', 0))
        
        await callback.message.edit_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!\n"
            f"–í–∞—à–∞ —Ä–æ–ª—å: {role_name}\n"
            f"–í–∞—à–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.",
            reply_markup=None
        )
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard(await db.is_admin_or_moderator(callback.from_user.id))
        )
        
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )
    finally:
        await state.clear()

@router.callback_query(
    RegistrationStates.confirm_data, 
    F.data == "confirm_no"
)
async def restart_registration(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!")
    await cmd_start(callback.message, state)